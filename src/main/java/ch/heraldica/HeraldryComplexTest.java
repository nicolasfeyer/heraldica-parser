package ch.heraldica;

import java.util.List;

import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.ConsoleErrorListener;
import org.antlr.v4.runtime.RecognitionException;
import org.antlr.v4.runtime.Recognizer;
import org.antlr.v4.runtime.tree.ParseTree;
import org.antlr.v4.runtime.tree.TerminalNode;

class CustomErrorListener extends ConsoleErrorListener {

    private final String prefix;

    CustomErrorListener(String prefix) {
        this.prefix = prefix;
    }

    @Override
    public void syntaxError(
            Recognizer<?, ?> recognizer,
            Object offendingSymbol,
            int line,
            int charPositionInLine,
            String msg,
            RecognitionException e) {
        System.err.println(prefix + "line " + line + ":" + charPositionInLine + " " + msg);
    }
}

public class HeraldryComplexTest {
    public static void main(String[] args) {
        var examples =
                List.of(
                        "coup√©, d'or au lion issant de gueules, et d'azur au chevron d'or",
                        "coup√© de gueules et d'or, au lion de l'un √† l'autre",
                        "De gueules au lion d'or tenant une coupe du m√™me",
                        "coup√©, de gueules au lion d'or, et d'azur",
                        "Coup√© de sable et d'argent",
                        "coup√©, d'argent au lion de gueules, et d'azur",
                        "coup√©, d'or au lion issant de gueules, et de sable √† la fasce d'or",
                        "coup√©, au 1 d'or au lion issant de gueules, au 2 d'azur √† trois fers de lance d'argent (2,1)",
                        "tranch√©, d'or au lion de gueules, et de gueules √† trois √©toiles d'or pos√©es en bande",
                        "Parti, au 1 de sinople √† la fasce d'argent, au 2 de gueules √† trois √©toiles d'or pos√©es en bande.",
                        "√âcartel√©, au 1 d'or √† la croix de gueules, au 2 d'azur au lion d'argent, au 3 de sable √† une tour d'or.",
                        "√©cartel√©, aux 1 et 4 un lion issant d'une montagne de cinq coupeaux pos√©e sur un arc-en-ciel mouvant de la pointe ; aux 2 et 3, trois bandes",
                        "√©cartel√©, aux 1 et 4 d'azur au sautoir accompagn√© de quatre croisettes, aux 2 et 3 de gueules √† un coeur pos√© entre deux vergettes et accompagn√© en pointe d'une montagne de trois coupeaux"
                );

        for (var input : examples) {
            var idx = examples.indexOf(input) + 1;
            System.out.println("Analyse " + idx + " : " + input);
            try {
                var lexer = new ch.heraldica.HeraldryRulesLexer(CharStreams.fromString(input));
                var parser = new ch.heraldica.HeraldryRulesParser(new CommonTokenStream(lexer));
                var customErrorListener = new CustomErrorListener("Analyse " + idx + ". ");
                parser.removeErrorListeners();
                lexer.removeErrorListeners();
                parser.addErrorListener(customErrorListener);
                lexer.addErrorListener(customErrorListener);
                var tree = parser.blason();
                System.out.println(tree.toStringTree(parser));
                printSemantic(tree, parser, 0);
            } catch (Exception e) {
                System.err.println("Erreur lors de l'analyse : " + e.getMessage());
            }
            System.out.println("-------------------------------------------------");
        }
    }

    /**
     * Prints a semantic, emoji-annotated representation of the parse tree.
     */
    public static void printSemantic(
            ParseTree tree, ch.heraldica.HeraldryRulesParser parser, int indent) {
        var indentString = "  ".repeat(indent);

        if (tree instanceof TerminalNode) {
            // For terminals, show the token text in quotes
            System.out.println(indentString + "üí¨ \"" + tree.getText() + "\"");
        } else {
            // For rules, find the name and assign a semantic icon
            var ruleName =
                    parser.getRuleNames()[((org.antlr.v4.runtime.RuleContext) tree).getRuleIndex()];

            var icon =
                    switch (ruleName) {
                        // --- Top Level ---
                        case "blason" -> "üõ°Ô∏è"; // The entire coat of arms

                        // --- Partitioning Logic ---
                        case "partitioned_blason" -> "‚ûó"; // A blason that is divided
                        case "partition_type" -> "üî™"; // NEW: The type of partition (coup√©, parti, etc.)
                        case "binary_partition_body" -> "‚öñÔ∏è"; // The "... et ..." structure for two parts
                        case "quartered_partition_body" -> "üî¢"; // The "au 1... au 2..." structure for quartering
                        case "multi_numbered_field" -> "üìë"; // Multiple numbered fields, e.g., "aux 1 et 3"
                        case "numbered_field" -> "üè∑Ô∏è"; // A single numbered field "au X..."
                        case "separator" -> "‚ÜîÔ∏è"; // A separator like a comma or semicolon
                        case "number_list" -> "üßÆ"; // A list of numbers, e.g., "1 et 3"

                        // --- Composition ---
                        case "simple_blason" -> "üñºÔ∏è"; // A complete, single composition (field + charges)
                        case "field" -> "üèûÔ∏è"; // The background of a field
                        case "charge_description" -> "üìú"; // The full description of charges on a field

                        // --- Charge Details ---
                        case "meuble_desc" -> "‚úçÔ∏è"; // The specific details of one charge
                        case "sub_meuble_desc" ->
                                "üìÑ"; // NEW: A nested charge description (e.g., for an item being held)
                        case "modifier" -> "‚ú®"; // A modifier for a charge (e.g., color, action)
                        case "sub_modifier" -> "üî∏"; // NEW: A nested modifier
                        case "attributes" -> "üñåÔ∏è"; // Specific attributes like color and position
                        case "charge_modifier_link" -> "üîó"; // A linking word like 'de' or 'sur'
                        case "positional_stmt" -> "üìç"; // NEW: A positional phrase like 'en pointe'
                        case "action_phrase" ->
                                "üó£Ô∏è"; // NEW: A complex action phrase (e.g., 'accompagn√© de trois √©toiles')

                        // --- Core Components ---
                        case "charge" -> "‚öúÔ∏è"; // A generic charge (Fleur-de-lis icon)
                        case "meuble" -> "ü¶Å"; // A specific animate/inanimate charge (e.g., a lion)
                        case "piece" -> "‚ûï"; // A specific geometric charge (e.g., a cross)
                        case "position" -> "ü§∏"; // The attitude or posture of a charge
                        case "action" -> "‚úä"; // An action, like 'tenant' (holding)
                        case "number" -> "#Ô∏è‚É£"; // A number like 'trois'
                        case "arrangement" -> "‚ôüÔ∏è"; // The layout of multiple charges, e.g., (2,1)

                        // --- Tinctures (Colors) ---
                        case "tincture_spec" -> "üîñ"; // NEW: A tincture specification (e.g., 'd'or' or 'du m√™me')
                        case "couleur" -> "üåà"; // Any color
                        case "metal" -> "ü™ô"; // Gold or Silver
                        case "email" -> "üé®"; // Enamels (blue, red, etc.)
                        case "fourrure" -> "üêæ"; // Furs (ermine, vair)

                        default -> "üìù"; // Default for any other rule
                    };

            System.out.println(indentString + icon + " " + ruleName);

            // Recursively print children
            for (var i = 0; i < tree.getChildCount(); i++) {
                printSemantic(tree.getChild(i), parser, indent + 1);
            }
        }
    }
}
